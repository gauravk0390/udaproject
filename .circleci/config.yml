version: 2.1
orbs:
  slack: circleci/slack@4.1
#dummy commit
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id: 
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-fronend-<< parameters.id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id: 
        type: string   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/AKWrdf1Ma91keBiSA1N9CB/migration_<< parameters.id >>)
            echo $SUCCESS
            if (( $SUCCESS == 1 )); 
            then
            cd ~/project/backend
            npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build         
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["frontend-build"]
      - run:
          name: frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build"]
      - run:
          name: frontend test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople\
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"   
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            backend_ip=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:udacity,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "$backend_ip" >> ~/project/.circleci/ansible/inventory.txt
            echo "$backend_ip" 
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7} 
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
        environment:
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cd:88:70:73:94:0f:81:e9:63:8b:05:c1:1e:0b:14:d9"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update bash
            apk add curl
            apk add --no-cache tar gzip
            apk add --no-cache gzip
            apk add openssh-client
            apk update
            apk --no-cache add curl
            apk --no-cache add unzip
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible 
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}          
  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            touch migrations_dump.txt 
            npm run migrations >> migrations_dump.txt 
            cat migrations_dump.txt 
      - run:
          name: Send migration results to kvdb
          command: |
            cd backend
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/AKWrdf1Ma91keBiSA1N9CB/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
            curl https://kvdb.io/AKWrdf1Ma91keBiSA1N9CB/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}    
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0   
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -y -qq install -y tar 
            sudo apt-get -qq install awscli
            cd frontend
            sudo npm install webpack-dev-server -g
            sudo npm install
      - run:
          name: Get backend url
          working_directory: /home/circleci/project/frontend
          command: |
            sudo chmod -R 777 /usr/local/lib/node_modules
            touch ".env"
            backend_pub_ip=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:udacity,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${backend_pub_ip}:3030"
            echo "API_URL=${API_URL}" >> .env
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            echo ENVIRONMENT=production >> frontend/.env
            echo NODE_ENV=production >> frontend/.env
            cd ~/project/frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}      
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["cd:88:70:73:94:0f:81:e9:63:8b:05:c1:1e:0b:14:d9"]  
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
            apk add curl
            apk add --no-cache tar gzip
            apk add --no-cache gzip
            apk update
            apk add openssh-client
            apk add nodejs npm           
            apk --no-cache add curl
            apk --no-cache add unzip
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            echo ENVIRONMENT: production >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts>> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd backend
            npm install
            npm run build
            cp package* ./dist
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            ls -lrt
            backend_aws_ip=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:udacity,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            echo "$backend_aws_ip" >> ~/project/.circleci/ansible/inventory.txt
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
  front-end-smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run:
          name: Install dependencies
          command: | 
            apk add --update tar gzip curl nodejs npm
            pip install awscli 
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.website-us-east-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
  back-end-smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run:
          name: Install dependencies
          command: | 
            apk add --update curl
            pip install awscli
            apk add nodejs npm
            apk add openssh-client 
      - run:
          name: Backend smoke test
          command: |
            export backend_aws_ip=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:udacity,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text)
            export API_URL="http://${backend_aws_ip}:3030"
            echo ${API_URL}
            if curl -s ${API_URL}/api/status | grep "ok"
            then
              return 0
            else
              return 1
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]  
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main] 
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - front-end-smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - back-end-smoke-test:
          requires: [front-end-smoke-test]